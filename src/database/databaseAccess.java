package database;import jakarta.servlet.annotation.WebServlet;import java.sql.*;import java.util.ArrayList;@WebServlet("/database")public class databaseAccess{    Connection connection = null;    public databaseAccess() {        try {            Class.forName("com.mysql.cj.jdbc.Driver");            String url = "jdbc:mysql://localhost:3306/demo?serverTimezone=UTC";            String user = "root";            String password = "1101140325";            connection = DriverManager.getConnection(url, user, password);            System.out.println("connected!");        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (SQLException throwables) {            throwables.printStackTrace();        }    }    public ResultSet recieveResult(String sql){        ResultSet resultSet = null;        try {            Statement statement = connection.createStatement();            resultSet = statement.executeQuery(sql);        } catch (SQLException throwables) {            throwables.printStackTrace();        }        return resultSet;    }    public ArrayList<ArrayList> searchAllAppointment() throws SQLException {        String sql = "select nameOfClient,serviceType,time,location,message from appointment inner join users on users.userId=appointment.userId";        ResultSet resultSet = recieveResult(sql);        ArrayList<ArrayList> output = new ArrayList<ArrayList>();        ArrayList<String> nameOfClient = new ArrayList<String>();        ArrayList<String> serviceType = new ArrayList<String>();        ArrayList<String> time = new ArrayList<String>();        ArrayList<String> location = new ArrayList<String>();        ArrayList<String> message = new ArrayList<String>();        while(resultSet.next()){            nameOfClient.add(resultSet.getString("nameOfClient"));            serviceType.add(resultSet.getString("serviceType"));            time.add(resultSet.getString("time"));            location.add(resultSet.getString("location"));            message.add(resultSet.getString("message"));        }        output.add(nameOfClient);        output.add(serviceType);        output.add(time);        output.add(location);        output.add(message);        return output;    }    public ArrayList<ArrayList> searchAppointment(String uesrId) throws SQLException {        String sql = "select * from appointment where userId =" + uesrId;        ResultSet resultSet = recieveResult(sql);        ArrayList<ArrayList> output = new ArrayList<ArrayList>();        ArrayList<String> serviceType = new ArrayList<String>();        ArrayList<String> time = new ArrayList<String>();        ArrayList<String> location = new ArrayList<String>();        ArrayList<String> message = new ArrayList<String>();        ArrayList<String> appointmentId = new ArrayList<String>();        while(resultSet.next()){            serviceType.add(resultSet.getString("serviceType"));            time.add(resultSet.getString("time"));            location.add(resultSet.getString("location"));            message.add(resultSet.getString("message"));            appointmentId.add(String.valueOf(resultSet.getInt("appointmentId")));        }        output.add(serviceType);        output.add(time);        output.add(location);        output.add(message);        output.add(appointmentId);        return output;    }    public String[][] searchService() throws SQLException {        String sql = "select serviceType, serivceCharge from services";        ResultSet resultSet = recieveResult(sql);        ArrayList<String> serviceType = new ArrayList<String>();        ArrayList<String> serviceCharge = new ArrayList<String>();        while(resultSet.next()){            serviceType.add(resultSet.getString(1));            serviceCharge.add(resultSet.getString(2));        }        String[][] result = new String[serviceType.size()][serviceCharge.size()];        for(int i = 0; i < serviceType.size() ;i++){            result[i][0] = serviceType.get(i);            result[i][1] = serviceCharge.get(i);        }        return result;    }    public void execute(String sql){        try {            Statement statement = connection.createStatement();            statement.executeUpdate(sql);        } catch (SQLException throwables) {            throwables.printStackTrace();        }    }    public String getHomeAddress(String userId) throws SQLException {        String sql = "select homeAddress from users where userId = " + userId;        ResultSet resultSet =  recieveResult(sql);        String output = null;        while (resultSet.next()){            output = resultSet.getString("homeAddress");        }        return output;    }    public String loginVerify(String emailAddress,String initialPassword) throws SQLException {        String sql = "select * from users where emailAddress = '" +                emailAddress +"' and initialPassword = '"+                initialPassword+"'";        ResultSet resultSet = recieveResult(sql);        if (resultSet.next()){            return resultSet.getInt("userId") + "," + resultSet.getString("isAdmin");        }        else{            return "fail";        }    }//    public static void main(String[] args) {//        databaseAccess a = new databaseAccess();//        try {//            System.out.println(a.getHomeAddress("9"));//        } catch (SQLException throwables) {//            throwables.printStackTrace();//        }//    }}